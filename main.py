
HORIZONTAL = 0
VERTICAL = 1

labyrinth = [[".",".",".",".",".",".",".",".","."],
            ["#",".",".",".","#",".",".",".","."],
            [".",".",".",".","#",".",".",".","."],
            [".","#",".",".",".",".",".","#","."],
            [".","#",".",".",".",".",".","#","."]]

labyrinth2 = [[".",".",".",".",".",".",".",".","."],
            ["#",".",".",".","#",".",".","#","."],
            [".",".",".",".","#",".",".",".","."],
            [".","#",".",".",".",".",".","#","."],
            [".","#",".",".",".",".",".","#","."]]

labyrinth3 = [[".",".","."],
            [".",".","."],
            [".",".","."]]

labyrinth4 = [[".",".",".",".",".",".",".",".",".","."],
            [".","#",".",".",".",".","#",".",".","."],
            [".","#",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".",".","."],
            [".","#",".",".",".",".",".",".",".","."],
            [".","#",".",".",".","#",".",".",".","."],
            [".",".",".",".",".",".","#",".",".","."],
            [".",".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".",".","."]]

def solve_maze(maze):
    rows = len(maze)
    cols = len(maze[0])
    direction = HORIZONTAL

    def is_valid(x, y):
        return 0 <= x < rows and 0 <= y < cols and maze[x][y] == "."
    
    def heuristic(x, y):
        return abs(x - (rows - 1)) + abs(y - (cols - 1))
         
    start = (0, 1, direction)
    open_list = [(heuristic(0, 1), 0, start)]  # (f, g, state)
    closed_set = set()
    
    while open_list:
       break #ToDo

    return None

maze=labyrinth

solucion, num_pasos = solve_maze(maze)
if solucion:
    print(num_pasos)
else:
    print("-1")


import heapq
